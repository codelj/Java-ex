package mythread;

public class MyLock {
	private String lockName;
	
	public MyLock() {
	}
	
	public MyLock(String lockName) {
		this.lockName = lockName;
	}
	
	public String getLockName() {
		return lockName;
	}
	public void setLockName(String lockName) {
		this.lockName = lockName;
	}
}

////////////////////////////////////////////////////////////////////////////////////
package mythread;

public class MyThread {
	private MyLock lock = new MyLock();
	
	public static void main(String[] args) {
		MyThread myThread = new MyThread();
		myThread.process();
	}

	public void process(){
		new Thread(new MyThreadPrint("1","2",lock)).start();
		new Thread(new MyThreadPrint("2","3",lock)).start();
		new Thread(new MyThreadPrint("3","4",lock)).start();
		new Thread(new MyThreadPrint("4","1",lock)).start();	
		
		lock.setLockName("1");	
	}
}

///////////////////////////////////////////////////////////////////////////////////
package mythread;

public class ThreadDemo implements Runnable{
	
	//shared lock must be static, or claim it in main() method
	private static Object lock = new Object(); 
	private int n;
	private static int flag = 1;
	
	public ThreadDemo(int n){
		this.n = n;		
	}
	
	public static void main(String[] args) {
		Thread t1 = new Thread(new ThreadDemo(1));
		Thread t2 = new Thread(new ThreadDemo(2));
		Thread t3 = new Thread(new ThreadDemo(3));
		Thread t4 = new Thread(new ThreadDemo(4));
		
		t1.start();
		t2.start();
		t3.start();
		t4.start();
	}

	@Override
	public void run() {
		for(;;){
			synchronized (lock) {
				System.out.println("in block");
				while(n != flag){
					try {
						lock.wait();
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
				}
				
				System.out.println(n);
				if(++flag > 4)
					flag -= 4;
				lock.notifyAll();	
			}
		}		
	}

}

/////////////////////////////////////////////////////////////////////////////////////
package mythread;

public class MyThreadPrint implements Runnable{
	private String curr;
	private String next;;
	private MyLock lock = new MyLock();

	public MyThreadPrint(String curr, String next, MyLock lock) {
		this.curr = curr;
		this.next = next;
		this.lock = lock;
	}

	public void run(){
		while(true){
			if(lock != null && lock.getLockName() != null && lock.getLockName().equals(curr)){
				System.out.println("Running... Thread " + curr);
				lock.setLockName(next);
			}
			
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}
